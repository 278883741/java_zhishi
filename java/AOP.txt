AOP：Aspect Oriented Programming面向切面编程，是OOP面向对象编程的一种补充 将程序中交叉业务逻辑（事务、日志）代码提取出来，封装成切面，
由AOP容器在适当时机(位置)将封装的切面动态的织入到具体业务逻辑中

连接点 Joinpoint 程序执行的某个特定位置，如方法调用前、方法调用后、方法抛出异常时、方法调用前后等 
切入点 Pointcut 定位查找到需要的连接点，即切点 
增强 Advice 也称为通知 在切点上执行的一段程序代码，用来实现某些功能 目标对象 Target 将执行增强处理的目标类 
织入 Weaving 将增强添加到目标类具体切入点上的过程 
代理 Proxy 一个类被织入增强后，会产生一个代理类 
切面 Aspect 切点和增强的组合
引介 Introduction 也称为引入

静态代理 -- 写一个类，完全实现原类的方法，调用新类方法的同时调用原方法
  代理类是程序员创建或工具生成 所谓静态就是程序运行之前就已经存在代理类的字节码文件 
  缺点：代理对象需要和目标对象实现相同的接口，如果接口增加方法，目标对象和代理对象都要维护
动态代理 
  代理类是程序在运行期间由JVM根据反射等机制动态生成的，自动生成代理类和代理对象 所谓动态就是指在程序运行前不存在代理类的字节码文件
  jdk动态代理缺点：目标类必须实现接口，生成的类不是目标类的实例，是$Proxy0